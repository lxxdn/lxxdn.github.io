<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>鸣叫的山河夜叉</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-06-11T21:31:59+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Julien LU</name>
   <email>julien.luxiao@gmail.com</email>
 </author>

 
 <entry>
   <title>Panga</title>
   <link href="http://localhost:4000/python%20effiency/2017/06/12/panga/"/>
   <updated>2017-06-12T08:34:24+08:00</updated>
   <id>http://localhost:4000/python%20effiency/2017/06/12/panga</id>
   <content type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;作为一个码农，总是需要记忆一些新的命令行工具的用法，参数，语言的语法。而由于我记忆力不好，常常会记住这个命令，就忘记另一个命令。或是一些已经记住的东西，一段时间不用又忘记了。&lt;/p&gt;

&lt;p&gt;归根结底，就是这些内容还没有被归入长期记忆中。 人的记忆是有规律的，一开始放在工作记忆区，这个记忆区的特点是记得快，忘得也快。然后经过一些复习，会进入短期记忆。进入短期记忆的内容再经过比较长时间的复习，巩固，最终进入长期记忆。一旦内容进入了长期记忆，在相当长的一段时间内都不会忘记。而想要将记忆的内容转换为长期记忆，需要制定一个比较科学的记忆计划。根据 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;/a&gt;。 如果能有个软件能根据这个曲线定期提醒你回顾复习你想要记忆的东西，就能以比较高的效率将想要记忆的内容放入长期记忆中了。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;我对这个软件有两个需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;内容保存在本地&lt;/li&gt;
  &lt;li&gt;我能够被动的接收到提醒要求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;市面上确实有不少根据遗忘曲线去背单词的软件，但是对能够自定义复习内容的软件却不多。试过几款之后，觉得都不是很满意，恰巧我有学习Python的需求，所以用 Python 写了这么一个小工具 &lt;a href=&quot;https://github.com/lxxdn/Panga&quot;&gt;Panga&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;这个工具有按照场景分为两部分：&lt;code class=&quot;highlighter-rouge&quot;&gt;收集&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;提醒&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;收集&quot;&gt;收集&lt;/h3&gt;

&lt;p&gt;收集也分为两个动作： 用户收集记忆的内容 和 Panga 获得用户想要记忆的内容保存在数据库中&lt;/p&gt;

&lt;p&gt;当用户有需要记忆的内容时，通过邮件将内容以特定的标题发送到特定的邮箱用户这边就结束了。为了提高效率，用链接的方式省去了输入邮箱地址和标题的时间 &lt;code class=&quot;highlighter-rouge&quot;&gt;mailto:abc@example.com?Subject=[Panga]&lt;/code&gt; 在浏览器和手机上各创建这样的链接，就能时间快速输入&lt;/p&gt;

&lt;p&gt;Panga则是一个长期跑的后台任务，他会定期检查特定邮箱中的未读邮件，如果邮件的标题符合要求，就会读取邮件内容，将内容存入数据库。Panga的数据结构比较简单：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;round&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-06-01 16:54:17&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;是需要记忆的内容，&lt;code class=&quot;highlighter-rouge&quot;&gt;round&lt;/code&gt;是当前记忆的轮数，按照遗忘曲线不同的轮数是有不同的复习时间间隔 &lt;code class=&quot;highlighter-rouge&quot;&gt;REMIND_INVERVAL = [1, 2, 4, 7, 14, 30, 60, 180, 360]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第0轮，是创建日期之后一天复习；第1轮，是创建日期之后的第二天复习。以此类推。&lt;/p&gt;

&lt;p&gt;由于数据结构简单，就用一个json文件作为数据库保存数据了。&lt;/p&gt;

&lt;h3 id=&quot;提醒&quot;&gt;提醒&lt;/h3&gt;

&lt;p&gt;由于我希望被动提醒，所以我决定通过邮件推送的形式。开了手机推送，我就不会错过了。
根据之前的描述，每天Panga会检查一遍所有的内容，并选出需要提醒的内容，最后通过邮件的形式发送到我的邮箱&lt;/p&gt;

&lt;h2 id=&quot;安装方法&quot;&gt;安装方法&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:lxxdn/Panga.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Panga
pip install -r requirements.txt

cp secrets.example.yml secrets.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;secrets&lt;/code&gt; 中加入你的邮箱的credentials&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;希望这个项目能够给使用者带来方便，如果有什么实用方法上的问题，也欢迎大家在Github上联系我。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Rate Limit 的通用做法</title>
   <link href="http://localhost:4000/backend/2017/05/22/rake-limit/"/>
   <updated>2017-05-22T09:12:24+08:00</updated>
   <id>http://localhost:4000/backend/2017/05/22/rake-limit</id>
   <content type="html">&lt;p&gt;在网站开发的过程中，难免会碰到需要限制api被滥用的情况，尤其是一些收费的api，如发短信的api接口。我们需要控制用户在一个时间段内发送的次数。&lt;/p&gt;

&lt;p&gt;一种直觉的做法，就是设置counter，每次调用api的时候，counter加一，然后每隔一段时间把counter清零。
这个做法的缺点是边界情况，假设我们想限制一个api每分钟调用不超过10次，那么，按照上面的做法，用户在59秒的时候调用了10次API，这个调用频率是合法的，然后在2秒后由于counter被清零了，用户又一下子调用了10次。那么问题来了，这样，相当于用户在3秒内调用了20次！&lt;/p&gt;

&lt;p&gt;所以，通常的的做法是使用&lt;a href=&quot;http://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95&quot;&gt;令牌桶算法&lt;/a&gt; ，也就是每隔一段时间给这个接口添加一个令牌，当api被调用的时候，就会消耗一个令牌，如果没有令牌了，就不允许调用，以此来显示接口不会被滥用。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;让我们看一下这个算法如何解决之前算法的边界问题：&lt;/p&gt;

&lt;p&gt;还是同样的情况，限制一个api每分钟调用不超过10次。于是，根据令牌桶算法，每隔10秒往桶里添加一个令牌。那么当用户在59秒的时候只能调用9次api，然后在下一分钟，由于桶中的令牌是逐个增加，所以，用户在任意的60秒内，桶内的令牌都不会超过10个。&lt;/p&gt;

&lt;p&gt;其实，这个算法比较理想化，因为如果完全按照这个算法实现，需要创建一个线程去一直去算，如果有多个api或者同一个api有不同的设置就需要多个线程，十分消耗系统资源。而且如果有api很少被调用，则又浪费了系统资源。&lt;/p&gt;

&lt;p&gt;Google的java库&lt;a href=&quot;https://github.com/google/guava&quot;&gt;guava&lt;/a&gt;提供了一种比较聪明的解法：&lt;/p&gt;

&lt;p&gt;建立一个 api_rate_limits 的表，用来记录资源的令牌数量。有两个字段 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_updated_at&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;last_updated_at&lt;/code&gt;表示上一次更新令牌数量的时间，而&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;表示上一次更新后的令牌数量。
每次调用api的时候，需要先更新令牌的数量, 算法为:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获得当前时间和上次时间的差值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;添加令牌的速率 * 时间差&lt;/code&gt; 获得可以增加多少令牌&lt;/li&gt;
  &lt;li&gt;最后从 &lt;code class=&quot;highlighter-rouge&quot;&gt;当前可获得令牌数 + 剩余令牌数&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;最大令牌数&lt;/code&gt; 中取一个最小值，保证获得的令牌不会超过最大的令牌数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;伪代码如下&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这种算法，就能在占用最小资源的情况下实现令牌桶算法！&lt;/p&gt;

</content>
 </entry>
 

</feed>
